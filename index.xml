<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research blog</title>
    <link>https://thomas-byrne.co.uk/</link>
    <description>Recent content on Research blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thomas-byrne.co.uk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Obsidian. An unconventional attack surface</title>
      <link>https://thomas-byrne.co.uk/research/obsidian-malicious-plugins/obsidian-research/</link>
      <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/obsidian-malicious-plugins/obsidian-research/</guid>
      <description>Introduction This research was inspired by Katie Inns and Jake Knotts research around unconventional attack surfaces. Link here
I don&amp;rsquo;t quite remember how I came up with the idea of targeting obsidian plugins for malicious purposes, however, I do remember noticing that to install obsidian community plugins you have to disable &amp;ldquo;safe mode&amp;rdquo; which got me thinking on what are the potential consequences of a malicious plugin. Following this I did some research on what a plugin actually is and how I could make one.</description>
    </item>
    
    <item>
      <title>A handbook of commands for the CRT exam</title>
      <link>https://thomas-byrne.co.uk/projects/handbook/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/projects/handbook/</guid>
      <description>Linux    Command Description     nmap -sV -p- -sU -o &amp;lt;IP&amp;gt; -oN nmap.txt All ports, Os fingerprint, UDP ports, Aggressive   nmap -T4 -v -oA myshares --script smb-enum-shares --script-args smbuser=,smbpass= -p445 [IP] Check for shares   nmap -sP &amp;lt;x.x.x.0&amp;gt;/24 nmap -sn &amp;lt;x.x.x.x&amp;gt;/24 Host discovery on a network   nmap -O -T5 -PE -F --osscan-limit --max-rtt-timeout 100ms --max-parallelism 100 --min-hostgroup 100 -oX out.xml -iL ip_networks.</description>
    </item>
    
    <item>
      <title>Active Directory. An overview</title>
      <link>https://thomas-byrne.co.uk/research/activedirectory/everything-about-ad/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/activedirectory/everything-about-ad/</guid>
      <description>Basic Overview/ Definitions  Directory – Contains all the information about the objects of the Active directory Object – An object references almost anything inside the directory (a user, group, shared folder&amp;hellip;) Domain – The objects of the directory are contained inside the domain. Inside a &amp;ldquo;forest&amp;rdquo; more than one domain can exist and each of them will have their own objects collection. Tree – Group of domains with the same root.</description>
    </item>
    
    <item>
      <title>Detecting AMSI bypass techniques</title>
      <link>https://thomas-byrne.co.uk/research/amsibypass/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/amsibypass/</guid>
      <description>tbc</description>
    </item>
    
    <item>
      <title>Docker escapes</title>
      <link>https://thomas-byrne.co.uk/research/docker/escapes/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/docker/escapes/</guid>
      <description>Exposed docker port ┌──(kali㉿kali)-[~/Documents/WithSecureLabs/dockerEscapes/lab1] └─$ docker -H 192.168.22.130:2375 info Native Overlay Diff: true userxattr: false Logging Driver: json-file Cgroup Driver: cgroupfs Cgroup Version: 1 Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc Default Runtime: runc Init Binary: docker-init containerd version: d71fcd7d8303cbf684402823e425e9dd2e99285d runc version: b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7 init version: de40ad0 Security Options: apparmor seccomp Profile: default Kernel Version: 4.</description>
    </item>
    
    <item>
      <title>Helpdesk</title>
      <link>https://thomas-byrne.co.uk/oscp/helpdesk/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/oscp/helpdesk/</guid>
      <description>Enumeration Web-proxy  Running Manage engine Service desk plus 7.60.  A quick search shows this is vulnerable to an SQL injection vulnerability.
http://192.168.162.43:8080/WorkOrder.do?woMode=viewWO&amp;amp;woID=1%27union%20select%20null,null%20;-- This gives an SQL syntax error, telling us the webserver is running Apache Tomcat/5.0.28 with a MySQL database.
SQL injection  There are no tables in the Database&amp;hellip;  http://192.168.162.43:8080/WorkOrder.do?woMode=viewWO&amp;amp;woID=1%20)%20union%20select%201,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1%20from%20information_schmea.tables/*%20--  Since there were no tables in the database I went back to the drawing board as this was a dead end.</description>
    </item>
    
    <item>
      <title>Internal</title>
      <link>https://thomas-byrne.co.uk/oscp/internal/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/oscp/internal/</guid>
      <description>Enumeration NMAP ┌──(kali㉿kali)-[~/Documents/OSCPprep/internal] └─$ nmap 192.168.193.40 -Pn -oN nmapALL.txt -p- Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-26 03:25 EDT Nmap scan report for 192.168.193.40 Host is up (0.049s latency). Not shown: 65522 closed tcp ports (conn-refused) PORT STATE SERVICE 53/tcp open domain 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 5357/tcp open wsdapi 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49155/tcp open unknown 49156/tcp open unknown 49157/tcp open unknown 49158/tcp open unknown UDP PORT STATE SERVICE 53/udp open domain 137/udp open netbios-ns 138/udp open|filtered netbios-dgm 500/udp open|filtered isakmp 3702/udp open|filtered ws-discovery 4500/udp open|filtered nat-t-ike 5355/udp open|filtered llmnr Netbios Netbios displays current concurrent I/O operations</description>
    </item>
    
    <item>
      <title>Jacko</title>
      <link>https://thomas-byrne.co.uk/oscp/jacko-writeup/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/oscp/jacko-writeup/</guid>
      <description>Webserver H2 H2 console Code execution This exploit utilises the Java Native Interface to load a Java class without needing to use the Java Compiler.
The reason we are able to execute a dll here is due to h2 allowing support of user defined functions. User defined functions are essentially Java functions the user can execute. A snippet from a blog post I was reading online here summed this up better than i could.</description>
    </item>
    
    <item>
      <title>Juicy Potato and how to exploit it</title>
      <link>https://thomas-byrne.co.uk/research/activedirectory/juicy-potato/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/activedirectory/juicy-potato/</guid>
      <description>What is Juicy Potato It is an exploit that can be used to gain a SYSTEM level shell on a target machine if the current user has the SE IMPERSONATE privilege set. This isn&amp;rsquo;t so much a vulnerability but more an abuse of functionality. The impersonate privilege allows an account, typically a service account like svc\mysql to impersonate any user on the machine, including local system. Therefore this if an account has this privilege enabled it should be treated as local system as there is no way to prevent this as it is normal functionality.</description>
    </item>
    
    <item>
      <title>Mice</title>
      <link>https://thomas-byrne.co.uk/oscp/mice/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/oscp/mice/</guid>
      <description>Enumeration NMAP ┌──(kali㉿kali)-[~/Documents/OSCPprep/mice] └─$ nmap 192.168.162.199 -p- -Pn -oN nmapALL.txt Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-26 13:06 EDT Nmap scan report for 192.168.162.199 Host is up (0.023s latency). Not shown: 65530 filtered tcp ports (no-response) PORT STATE SERVICE 1978/tcp open unisql 1979/tcp open unisql-java 1980/tcp open pearldoc-xact 3389/tcp open ms-wbt-server 7680/tcp open pando-pub Nmap done: 1 IP address (1 host up) scanned in 129.57 seconds Port 1978 Googling it returns a piece of software called RemoteMouse.</description>
    </item>
    
    <item>
      <title>SEH Overflows</title>
      <link>https://thomas-byrne.co.uk/research/binaryexploitation/seh/seh-overflows/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/binaryexploitation/seh/seh-overflows/</guid>
      <description>What is a Structured Exception Handler (SEH)? Exception handlers are programming constructs used to catch errors in Windows applications. They catch both system level and application level errors. They commonly look like the code snippet below.
The idea is to continue coding best practices to allow applications or system events to fail gracefully.
try { // do something } else{ catch(Exception e) { // Error handling 	} } Windows has a default exception handler for when an application doesn&amp;rsquo;t implement their own handler for a certain error condition.</description>
    </item>
    
    <item>
      <title>Useful Docker commands &amp; exploring Docker sockets</title>
      <link>https://thomas-byrne.co.uk/research/docker/docker-commands/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/research/docker/docker-commands/</guid>
      <description>What is a docker socket Docker has a RESTful API for interacting with the Docker daemon (called the Docker engine API). This daemon is used to handle the running and managing of containers. It can listen for Docker Engine API requests via three different types of Socket: unix, tcp, and fd.
Communication to a container can be created through the unix domain socket (or IPC socket) which is created at /var/run/docker.</description>
    </item>
    
    <item>
      <title>Making a rootkit</title>
      <link>https://thomas-byrne.co.uk/projects/makingarootkit/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/projects/makingarootkit/</guid>
      <description>Coming soon! </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://thomas-byrne.co.uk/about/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/about/</guid>
      <description>Hi there I&amp;rsquo;m a security consultant at WithSecure. This website is just a collection of some write ups on things I have done, new research i&amp;rsquo;m working on or cool projects. Essentially it will be a dump for anything I find of potential interest myself or that someone in the industry might find interesting.
Contact me Feel free to contact me on anything that isn&amp;rsquo;t quite accuracte on the blog (we all make mistakes and i am happy to learn).</description>
    </item>
    
    <item>
      <title>Showcase</title>
      <link>https://thomas-byrne.co.uk/showcase/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/showcase/</guid>
      <description>This page is a showcase of my most recent research/ research that i think really deserves a read!
  Obsidian. An unconventional attack surface.
  Detecting AMSI bypassing techniques with Machine Learning
  Creating a Linux rootkit
  </description>
    </item>
    
    <item>
      <title>Linux Drivers and How they work</title>
      <link>https://thomas-byrne.co.uk/projects/linuxdrivers/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://thomas-byrne.co.uk/projects/linuxdrivers/</guid>
      <description>Introduction/ honorable mentions This document is solely for my own learning purposes, and is for my own personal use to reference back to when I am working with drivers. The content in the document has been taken from many different sources, and put mainly into my own words for my own understanding. This is not a document to teach people about Linux kernel drivers or rootkits and most of the written content is not my own.</description>
    </item>
    
  </channel>
</rss>
